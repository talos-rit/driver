%% Changelog
%% Author | Date | Notes
%% ----|----|----
%% Brooke Leinberger | 2025/01/27 | Init

classDiagram
direction LR

    class Ichor {
    isr: ISR_Resources
    pwm: PWM
    adc: ADC
    ext: GPIO_EXT
    motors: Motor[8]
    Start(): void
    Stop(): void
    }

    class Motor {
    channel: int
    home_pin: int8
    homing_type: HOMING_ENUM
    isr: ISR_Resources
    engine: Engine
    i_sense: CurrentSense
    encoder: Rotary_Encoder

    Motor(channel, isr, pwm, adc, ext): Motor
    ConfigureHoming(type: HOMING_ENUM, pin: int8): Status
    ConfigureEngine(pwm, gate_a, gate_b, speed_pin): Status
    ConfigureISense(adc, channel, resistance_mOhm): Status
    SetSpeed(speed: int32): Status
    }

    class HOMING_ENUM {
    HOMING_SWITCH
    HOMING_STOP
    }

    class Engine {
    %% PWM control
    pwm_dev: PWM
    gate_a: int8
    gate_b: int8
    speed_pin: int8
    speed: int32
    SetSpeed(speed: int32): Status
    GetSpeed(): int32
    }

    class PWM {
    dev: Serial_Dev
    SetDutyCycle(pin: int8, value: uint16): Status
    GetDutyCycle(pin: int8): int32
    }

    class ADC {
    dev: Serial_Dev
    GetVoltage_mV(channel: uint8) int16
    }

    class CurrentSense {
    adc: ADC
    channel: uint8
    resistance_mOhm: uint32
    value_mV: int16
    GetCurrent_mA() int16
    }

    class GPIO_EXT {
    dev: Serial_Dev
    home_sw: GPIO[8]
    GetState(pin: uint8) uint8
    }

    class Rotary_Encoder {
    value: int
    state: int
    GetValue(): int
    ToggleA(): void
    ToggleB(): void
    }

    class I2C_Bus {
    }

    class SPI_Dev {
    }

    class Serial_Dev {
    <<Abstract>>
    dev_path: string
    file_desc: int
    tx_buffer: uint8[]
    rx_buffer: uint8[]
    tx_iter: uint16
    rx_iter: uint16

    Open(): Status
    Close(): Status
    QueueWrite(): Status
    QueueRead(): Status
    ExecuteQueue(): Status
    }

    class ISR_Resources {
    pin_map: GPIO_INTR[40]
    SetPinType(pin: uint8, type: INTR_TYPE_ENUM): Status
    GetPinType(pin: uint8): INTR_TYPE_ENUM
    SetCallback(pin: uint8, callback: void_ptr): Status
    GetCallback(pin: uint8): void_ptr
    ExecutePin(pin: uint8): void
    }

    class GPIO_INTR {
    pin_type: INTR_TYPE_ENUM
    callback: void_ptr
    }

    class INTR_TYPE_ENUM {
        PIN_TYPE_ENCODER_A
        PIN_TYPE_ENCODER_B
        PIN_TYPE_E_STOP
        PIN_TYPE_HOMING
    }

    ISR_Resources --> GPIO_INTR
    GPIO_INTR --> INTR_TYPE_ENUM
    Motor --> ISR_Resources

    %%Ichor --> ADC
    %%Ichor --> PWM
    %%Ichor --> GPIO_EXT
    Ichor --> Motor

    Motor       --> Engine
    Motor       --> CurrentSense
    Motor       --> GPIO_EXT
    Motor       --> Rotary_Encoder
    Motor       --> HOMING_ENUM

    Engine      --> PWM
    CurrentSense --> ADC

    ADC         --> Serial_Dev
    PWM         --> Serial_Dev
    GPIO_EXT    --> Serial_Dev

    Serial_Dev  <|-- I2C_Bus
    Serial_Dev  <|-- SPI_Dev